Name   : Ram Prakash Saravanan
Emp id :46209795

Basic Unix Command Line Assignment with answers :

1. List the contents of a directory and their attributes 
- ls

2. Long list the content with file, directory ownership, permissions,sizes, etcâ€¦
- ls -l

3. Display the size of the file in human readable format
- ls -lh

4. Show all files and folders including hidden one
- ls -a

5. list directories recursively
- ls -R

6. Sort the files by size with largest at the top
- ls -sl

7. Sort the files by last time modified displaying the newest first.
- ls -t

8. Diplay the location of a program/command, where it is installed.
- whereis -u program

9. Which command is used to switch directory from one to another
- cd dirname

10. List all the environment variables set for the current shell environment
- env
  
11. Did you notice something in the output of "env" command?
- yes, it displays environment variables

12. Which command is used to print the text or any variables value in the Console/Terminal?
- echo

13. Print the value of the env variable "PATH" on the console
- echo $PATH 

14. Is linux a case-sensitive operating system?
- yes  

15. Is, "Ls" same as "ls"?
- NO, 'Ls' does not exist

16. Display your currently logged in user
- echo $USER

17. how do you change the currrently logged in user to another user?
- su -

18. Which command is used to leave a shell environment that you are currently logged in to?
- exit command

19. How do you reboot the system?
- sudo reboot or sudo systemct1 reboot

20. How do you shutdown the system?
- sudo shutdown

21. Display all the major running processes in the system
-ps command

22. Understand the output of command used in above question of displaying processes, explain the meaning of each column and what data it displays?
-PID TTY time and cmd

23. Display the name of the system kernel
-uname -s

24. display the kernel release number
-uname -r

25. display the machine type of the current kernel
-uname -m
 
26. Display the name of the operating system that the kernel is running on
-uname -0

27. Display all info that uname command can show.
- uname -a

28. Display the name of directory that you are currently pointing to
-pwd 

29. change the current directory to another directory that you have in your system.
-cd[dir.namr]

30. Go up one directory
- cd.. 

31.Return to last directory
- cd -

32. change the current directory to home(logged in user's) directory
-cd/

33. How to check all the command used from the prompt (Command History)
-history

34. In which file the history of commands are stored in?
- .bash_history

35. How many lines of history does the system keep and from where you can change it?
- 2000 

36. How can you modify bash's history behaviour
-PROMPT_COMMAND

37. Display all the commands entered so far, now, try to run a particular command from the history list without typing that command.
- Done.

NOTE:- TAB key is your friend when it comes to command completion and having long file and directory names autocompleted at the bash prompt for you. JUST BE LAZY AND USE TAB KEY FOR AUTO COMPLETION ;-)

38. What are the different types of shell and where are they used and how do we use them?
-The C SHell -csh
The Bourne Shell -sh 
The Korn SHell -ksh
GNU Bourne-Again Shell -bash

39. What is the difference between login shell and non-login shell?
- If the output is the name of our shell , prepended by a dash, then it is a login shell. For example -bash, -su etc..

40. How do we start login shell and non-login shell?
-bash -l or sh -l

41. What happens when you start a login shell (which files are read and used and Why)?
-it looks for ~/. bash_profile , ~/. bash_login , and ~/.

42. What happens when you start a non-login shell (Which files are read and used and Why)?
-Bash reads and executes commands form ~/. bashrc

43. What are Shell Configuration Files, why do we need it?
-/etc/profile	This is a "System wide" initialisation file that is executed during login. This file provides initial environment variables and initial "PATH" locations.
/etc/bashrc	This again is a "System Wide" initialisation file. This file is executed each time a Bash shell is opened by a user. Here you can define your default prompt and add alias information. Values in this file can be overridden by their local ~/.bashrc entry.
~/.bash_profile	If this file exists, it is executed automatically after /etc/profile during the login process. This file can be used by each user to add individual entries. The file however is only executed once at login and normally then runs the users .bashrc file.
~/.bash_login	If the ".bash_profile" does not exist, then this file will be executed automatically at login.
~/.profile	If the ".bash_profile" or ".bash_login" do not exist, then this file is executed automatically at login.
~/.bashrc	This file contains individual specific configurations. This file is read at login and also each time a new Bash shell is started. Ideally, this is where you should place any aliases.
~/.bash_logout	This file is executed automatically during logout.
~/.inputrc	This file is used to customize key bindings/key strokes.

44. Explain the Order of file usage from the system/user's home directory when user logs in to the System.
-

45. What are Shell Variables, list major shell variables and what do they represent?
-A shell variable is a special variable that is set by the shell and is required by the shell in order to function correctly. Some of these variables are environment variables whereas others are local variables.

46. How we see all our env variables?
-printenv

47. How we see all env variables in alphabical order?
-get-childitem env:*

48. What Format does the env var and its values are stored?
-

49. How do you create your own varible?
-choose a lower-case name for the variable and give it a value using an equal (=) sign

50. How do you start a new bash shell?
-bash

51. Difference between Local/Shell variables to Global Variable
- Local variable is declared inside a function whereas Global variable is declared outside the function.

52. Making a variable accessible from other the shell in the system.
-*If you want to make a variable available to every new process, then you can put it in /etc/environment (requires root privileges)

53. Show the real life use case of exporting a variable
-export is bash shell BUILTINS commands, which means it is part of the shell. It marks an environment variables to be exported to child-processes ...

54. Convert the above script file into a command, The file should run with "myappp" instead of "myapp.sh"
-

55. What is Globbing? Explain in depth with examples?
-The Bash shell feature that is used for matching or expanding specific types of patterns is called globbing.

56. List all entries with extension ".sh"
-find . -type f \( -name "*.sh")

57. List all entries with numbers in it.
-grep -x -E '[0-9]+

58. List all entries that starts with a character and ends with a number
-grep '^a.*e$' file

59. List all entries that name length more than 5 characters

60.What is Quoting? and Why do we need it? 

Quoting is used to remove the special meaning of certain characters or words to the shell. 
Quoting can be used to disable special treatment for special characters, 
to prevent reserved words from being recognized as such, and to prevent parameter expansion.

61. Write few(minimum 3) unique examples that shows, how a particular problem is solved using Quoting.
-~	Home directory	1
`	Command substitution (archaic)	4
#	Comment	4
$	Variable expression


62. How do you find a particular files/directories based on a particular search criteria?
-find . -name [filename]
HINT:- look for commands -> locate, find and whereis

63. Write major difference between locate, find and whereis?
-Big difference is that find searches real files recursively down a given directory, 
while locate searches a database without requiring specific directory.

64. How Globbing is different from locate, find and whereis?
-The find program searches a directory tree to find a file or group of files. 
It traverses the directory tree and reports all occurrences of a file matching the user's specifications. 
The find program includes very powerful searching capability.

The locate program scans one or more databases of filenames and displays any matches. 
This can be used as a very fast find command if the file was present during the last file name database update.

65. Explain the Linux File System.
-A Linux file system is a structured collection of files on a disk drive or a partition. 
A partition is a segment of memory and contains some specific data.

66. Explain absolute and Relative Paths
-An absolute path is defined as specifying the location of a file or directory from the root directory(/). 
In other words,we can say that an absolute path is a complete path from start of actual file system from / directory.
 Relative path. Relative path is defined as the path related to the present working directly(pwd)

67. What are the different ways of creating a File in linux System? Write an example of each and the difference between them.
-
68. In how many ways we can delete the files from linux system? write an example of each and teh difference between them.
-In how many ways we can delete the files from linux system? write an example of each and teh difference between them.
$ unlink {file-name}
$ rm {file-name}

69. Archiving files using linux command, write a command to archive set of files from linux commands.
-tar command

70. Extract the archived files from the above step.
-tar -x